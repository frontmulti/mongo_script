44.

db.persons.insert({ userid  : "gdhong", username : "홍길동" })
db.persons.insert({ userid  : "parkms", username : "박문수" })

db.persons.ensureIndex({userid : 1}, { unique : true })

//오류 발생  : userid 중복
db.persons.insert({ userid  : "parkms", username : "박명수" })


45.
db.users.insert({ userid  : "gdhong", appCode: "gmarket" })
db.users.insert({ userid  : "parkms", appCode : "interpark" })
db.users.insert({ userid  : "gdhong", appCode: "interpark" })
db.users.insert({ userid  : "parkms", appCode : "auction" })
db.users.insert({ userid  : "gdhong", appCode: "yes24" })
db.users.insert({ userid  : "parkms", appCode : "gmarket" })

db.users.ensureIndex({userid : 1, appCode: 1}, { unique : true })

//정상 insert
db.users.insert({ userid  : "parkms", appCode : "yes24" })
//오류 발생  
db.users.insert({ userid  : "parkms", appCode : "gmarket" })


46.
db.users.insert({ userid : "gdhong", name : "홍길동", employeeid : 10001 })
db.users.insert({ userid : "parkms", name : "박문수" })
db.users.insert({ userid : "chsung", name : "성춘향", employeeid : 10010 })
db.users.insert({ userid : "mrlee", name : "이몽룡", employeeid : 10009 })
//희소 인덱스 설정
db.users.ensureIndex({ employeeid : 1 }, { sparse : true })
//박문수는 조회되지 않을 것임.
db.users.find().hint({ employeeid : 1}) 



47.
db.users.insert({ userid : "gdhong", name : "홍길동", employeeid : 10001 })
db.users.insert({ userid : "parkms", name : "박문수" })
db.users.insert({ userid : "chsung", name : "성춘향", employeeid : 10010 })
db.users.insert({ userid : "mrlee", name : "이몽룡", employeeid : 10009 })
db.users.ensureIndex({ employeeid : 1 }, { unique : true })

//중복된 것으로 간주. 이미 employeeid : null 인 것이 존재함.
db.users.insert({ userid : "parkms2", name : "박명수" })


48.
db.students.insert({ name : "홍길동", scores : [ 100, 90, 80, 100]})
db.students.insert({ name : "이몽룡", scores : [ 100, 90, 80, 20]})
db.students.insert({ name : "김철수", scores : [ 30, 90, 80, 90]})
db.students.insert({ name : "박문수", scores : [ 100, 50, 80, 60]})
db.students.insert({ name : "성춘향", scores : [ 80, 90, 80, 50]})

db.students.ensureIndex({scores:1})

//한과목이라도 100점을 받은 학생들의 리스트
db.students.find({ scores : 100 })

//100점과  90점을 모두 받은 학생들의 리스트
db.students.find({ scores :  { $all : [100, 90 ] } })


49.
db.zipcodes.ensureIndex({ loc: "2d" });
//지구의 반지름: 6378km, 반경 10km 이내에 있는 ...
var  earthRadius = 6378;   var  range = 10; // km
db.zipcodes.find({ loc : { $nearSphere : [-86.0, 33.0],
      $maxDistance : range / earthRadius } });

db.places.ensureIndex( { loc : "2d" , category : 1 } );

db.places.insert({ addresses : [ 
    { name : "Home", loc : [55.5, 42.3] }, { name : "Work", loc : [32.3, 44.2] } 
] })
db.places.ensureIndex({ "addresses.loc" : "2d" })


50.
샘플
db.articles.insert( [ 
   { _id: 1, subject: "coffee", author: "xyz", views: 50 }, 
   { _id: 2, subject: "Coffee Shopping", author: "efg", views: 5 }, 
   { _id: 3, subject: "Baking a cake", author: "abc", views: 90 }, 
   { _id: 4, subject: "baking", author: "xyz", views: 100 }, 
   { _id: 5, subject: "Café Con Leche", author: "abc", views: 200 }, 
   { _id: 6, subject: "Сырники", author: "jkl", views: 80 }, 
   { _id: 7, subject: "coffee and cream", author: "efg", views: 10 }, 
   { _id: 8, subject: "Cafe con Leche", author: "xyz", views: 10 } 
] )

db.articles.createIndex( { subject: "text" } )

db.articles.find( { $text: { $search: "coffee" } } )


52.
//샘플 데이터 생성
for (var i=0; i < 100000; i++) {
  db.randoms.insert({ num : i+1, random : Math.random() });
}
db.randoms.find().sort({ random : 1}).explain("executionStats")
db.randoms.createIndex({ random : 1})
db.randoms.find().sort({ random : 1}).explain("executionStats")


53.
db.randoms.find({ random : { $gt:0.4, $lt:0.5 }}).sort({ _id:-1 }).explain("executeStats");

db.randoms.find({ random : { $gt:0.4, $lt:0.5 }}).sort({ _id:-1 }).hint({ random:1 }).explain("executeStats");


58.
mongorestore.exe  --port 10000 --host localhost  c:\nasdaq_sample

//실행후 서버측 로그 확인
db.stocks.find({ "stock_symbol": "GOOG"}).sort({ date : 1 }).explain("executionStats")


59.
use nasdaq
db.setProfilingLevel(2);		//가장 많은 로그. 읽기/쓰기 모두
db.setProfilingLevel(1, 50);                 //읽기 연산. 임계값 50ms

db.stocks.find({}).sort({close:-1}).limit(1) 	//긴시간 처리되는 쿼리

//system.profile 컬렉션 조회하여 5초 이상 걸린 쿼리 조회
db.system.profile.find({millis : {$gt : 5000} }).sort({$natrual : -1}).limit(1)

db.createCollection("system.profile", { capped:true, size:2*1024*1024*1024 })



